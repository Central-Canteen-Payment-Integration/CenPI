<!-- Desktop Search Bar -->
<div id="mobile-search-bar" class="block bg-gray-100 rounded-lg shadow-md max-w-3xl w-full mx-auto md:hidden">
    <div class="flex items-center space-x-4">
        <div class="flex-1">
            <input id="search-input-mobile"
                class="input input-bordered w-full p-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Search" />
        </div>
        <div class="relative flex-1">
            <select id="filter-select-mobile"
                class="select select-bordered w-full p-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white">
                <option value="" class="text-gray-500">All Menus</option>
                <option value="Kantin Teknik">Kantek</option>
                <option value="Kantin Bawah">Kawah</option>
            </select>
            <div class="absolute right-3 top-1/2 transform -translate-y-1/2 pointer-events-none">
                <svg class="w-4 h-4 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none"
                    viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                </svg>
            </div>
        </div>
        <div class="flex items-center space-x-2">
            <button id="search-btn-mobile"
                class="btn bg-red-600 text-white py-2 px-4 rounded-lg hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500">
                Search
            </button>
        </div>
    </div>
</div>

<div class="join hidden md:flex items-center space-x-4 p-4 bg-gray-100 rounded-lg shadow-md max-w-3xl w-full mx-auto mt-0">
    <div class="flex-1">
        <input id="search-input"
            class="input input-bordered join-item w-full p-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
            placeholder="Search" />
    </div>
    <div class="flex-1">
        <div class="relative">
            <select id="filter-select"
                class="select select-bordered join-item w-full p-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 appearance-none bg-white">
                <option value="" class="text-gray-500">All Menus</option>
                <option value="Kantin Teknik">Kantek</option>
                <option value="Kantin Bawah">Kawah</option>
            </select>
            <div class="absolute right-3 top-1/2 transform -translate-y-1/2 pointer-events-none">
                <svg class="w-4 h-4 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                    stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                </svg>
            </div>
        </div>
    </div>
    <div class="indicator flex items-center space-x-2">
        <span id="filter-indicator"
            class="indicator-item badge badge-secondary bg-blue-500 text-white rounded-full py-1 px-2 text-xs">
            All Menus
        </span>
        <button id="search-btn"
            class="btn join-item bg-red-600 text-white py-2 px-4 rounded-lg hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500">
            Search
        </button>
    </div>
</div>

<div class="bg-white">
  <div>

  <?php /*
    <!-- Mobile filter dialog -->
    <div class="relative z-40 lg:hidden" role="dialog" aria-modal="true">
      <div class="fixed inset-0 bg-black/25" aria-hidden="true"></div>
      <div class="fixed inset-0 z-40 flex">
        <div class="relative ml-auto flex size-full max-w-xs flex-col overflow-y-auto bg-white py-4 pb-12 shadow-xl">
          <div class="flex items-center justify-between px-4">
            <h2 class="text-lg font-medium text-gray-900">Filters</h2>
            <button type="button" class="btn btn-ghost">
              <svg class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
              </svg>
            </button>
          </div>

          <!-- Filters -->
          <form class="mt-4 border-t border-gray-200">

            <div class="border-t border-gray-200 px-4 py-6">
              <h3 class="-mx-2 -my-3 flow-root">
                <button type="button" class="flex w-full items-center justify-between bg-white px-2 py-3 text-gray-400 hover:text-gray-500" aria-controls="filter-section-mobile-0" aria-expanded="false">
                  <span class="font-medium text-gray-900">Color</span>
                  <span class="ml-6 flex items-center">
                    <svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                      <path d="M10.75 4.75a.75.75 0 0 0-1.5 0v4.5h-4.5a.75.75 0 0 0 0 1.5h4.5v4.5a.75.75 0 0 0 1.5 0v-4.5h4.5a.75.75 0 0 0 0-1.5h-4.5v-4.5Z" />
                    </svg>
                  </span>
                </button>
              </h3>
              <div class="pt-6" id="filter-section-mobile-0">
                <div class="space-y-6">
                  <!-- Color options -->
                  <div class="flex gap-3">
                    <input id="filter-mobile-color-0" name="color[]" value="white" type="checkbox" class="checkbox">
                    <label for="filter-mobile-color-0" class="text-gray-500">White</label>
                  </div>
                  <div class="flex gap-3">
                    <input id="filter-mobile-color-1" name="color[]" value="beige" type="checkbox" class="checkbox">
                    <label for="filter-mobile-color-1" class="text-gray-500">Beige</label>
                  </div>
                  <div class="flex gap-3">
                    <input id="filter-mobile-color-2" name="color[]" value="blue" type="checkbox" class="checkbox">
                    <label for="filter-mobile-color-2" class="text-gray-500">Blue</label>
                  </div>
                </div>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>*/
    ?>

    <main class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
      <div class="flex items-baseline justify-between border-b border-gray-200 pb-6 pt-4">
        <h1 class="text-4xl font-bold tracking-tight text-gray-900">Menu</h1>

        <div class="flex items-center">
            <div class="dropdown dropdown-end relative inline-block">
                <label tabindex="0" class="group inline-flex justify-center text-sm font-medium text-gray-700 hover:text-gray-900 cursor-pointer">
                    Sort
                    <svg class="-mr-1 ml-1 w-5 h-5 shrink-0 text-gray-400 group-hover:text-gray-500" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                    <path fill-rule="evenodd" d="M5.22 8.22a.75.75 0 0 1 1.06 0L10 11.94l3.72-3.72a.75.75 0 1 1 1.06 1.06l-4.25 4.25a.75.75 0 0 1-1.06 0L5.22 9.28a.75.75 0 0 1 0-1.06Z" clip-rule="evenodd" />
                    </svg>
                </label>
                <ul tabindex="0" class="dropdown-content menu p-2 mt-2 shadow-2xl bg-white rounded-md ring-1 ring-black/5 w-40">
                    <li>
                    <a href="#" class="block px-4 py-2 text-sm font-medium text-gray-900" id="menu-item-0">Name</a>
                    </li>
                    <li>
                    <a href="#" class="block px-4 py-2 text-sm text-gray-500" id="menu-item-3">Price: Low to High</a>
                    </li>
                    <li>
                    <a href="#" class="block px-4 py-2 text-sm text-gray-500" id="menu-item-4">Price: High to Low</a>
                    </li>
                </ul>
            </div>
            <button type="button" class="-m-2 ml-4 p-2 text-gray-400 hover:text-gray-500 sm:ml-6 lg:hidden">
                <svg class="w-5 h-5" aria-hidden="true" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M2.628 1.601C5.028 1.206 7.49 1 10 1s4.973.206 7.372.601a.75.75 0 0 1 .628.74v2.288a2.25 2.25 0 0 1-.659 1.59l-4.682 4.683a2.25 2.25 0 0 0-.659 1.59v3.037c0 .684-.31 1.33-.844 1.757l-1.937 1.55A.75.75 0 0 1 8 18.25v-5.757a2.25 2.25 0 0 0-.659-1.591L2.659 6.22A2.25 2.25 0 0 1 2 4.629V2.34a.75.75 0 0 1 .628-.74Z" clip-rule="evenodd" />
                </svg>
            </button>
        </div>
      </div>

      <section aria-labelledby="products-heading" class="pb-24 pt-6">
        <div class="grid grid-cols-1 gap-x-8 gap-y-10 lg:grid-cols-4">
          <!-- Filters -->
          <form class="hidden lg:block">
            <div class="border-b border-gray-200 py-6">
              <h3 class="-my-3 flow-root">
                <div class="flex w-full items-center justify-between bg-white py-3 text-sm text-gray-400 hover:text-gray-500" aria-controls="filter-section-0" aria-expanded="false">
                  <span class="font-medium text-gray-900">Food</span>
                </div>
              </h3>
              <div class="pt-6" id="filter-section-0">
                <div class="space-y-4">
                  <div class="flex gap-3">
                    <input id="filter-color-0" name="color[]" value="white" type="checkbox" class="checkbox">
                    <label for="filter-color-0" class="text-sm text-gray-600">White</label>
                  </div>
                  <div class="flex gap-3">
                    <input id="filter-color-1" name="color[]" value="beige" type="checkbox" class="checkbox">
                    <label for="filter-color-1" class="text-sm text-gray-600">Beige</label>
                  </div>
                  <div class="flex gap-3">
                    <input id="filter-color-2" name="color[]" value="blue" type="checkbox" class="checkbox">
                    <label for="filter-color-2" class="text-sm text-gray-600">Blue</label>
                  </div>
                </div>
              </div>
            </div>
            <div class="border-b border-gray-200 py-6">
              <h3 class="-my-3 flow-root">
                <div class="flex w-full items-center justify-between bg-white py-3 text-sm text-gray-400 hover:text-gray-500" aria-controls="filter-section-0" aria-expanded="false">
                  <span class="font-medium text-gray-900">Drinks</span>
                </div>
              </h3>
              <div class="pt-6" id="filter-section-0">
                <div class="space-y-4">
                  <div class="flex gap-3">
                    <input id="filter-color-0" name="color[]" value="white" type="checkbox" class="checkbox">
                    <label for="filter-color-0" class="text-sm text-gray-600">White</label>
                  </div>
                  <div class="flex gap-3">
                    <input id="filter-color-1" name="color[]" value="beige" type="checkbox" class="checkbox">
                    <label for="filter-color-1" class="text-sm text-gray-600">Beige</label>
                  </div>
                  <div class="flex gap-3">
                    <input id="filter-color-2" name="color[]" value="blue" type="checkbox" class="checkbox">
                    <label for="filter-color-2" class="text-sm text-gray-600">Blue</label>
                  </div>
                </div>
              </div>
            </div>
          </form>

          <!-- Product grid -->
          <div class="lg:col-span-3 grid grid-cols-3 gap-4" id="menu-container">
          </div>
        </div>
      </section>
    </main>
  </div>
</div>


<!-- JavaScript for Accordion Functionality -->
<script>
    // Handle category change (Makanan/Minuman) for both mobile and desktop
    function handleCategoryChange() {
        const selectedCategory = document.querySelector('input[name="category"]:checked').value;

        // Desktop version: Show/Hide the Makanan and Minuman accordions
        const makananAccordionDesktop = document.getElementById('accordion-makanan');
        const minumanAccordionDesktop = document.getElementById('accordion-minuman');
        makananAccordionDesktop.style.display = 'none';
        minumanAccordionDesktop.style.display = 'none';

        // Mobile version: Show/Hide the mobile accordions
        const makananAccordionMobile = document.getElementById('mobile-accordion-makanan');
        const minumanAccordionMobile = document.getElementById('mobile-accordion-minuman');
        makananAccordionMobile.classList.add('hidden');
        minumanAccordionMobile.classList.add('hidden');

        // Reset subcategory radio buttons for both versions
        resetSubcategoryRadios();

        // Show the relevant accordion based on the selected category
        if (selectedCategory === 'Makanan') {
            // Desktop: Show the Makanan accordion
            makananAccordionDesktop.style.display = 'block';
            // Mobile: Show the Makanan accordion
            makananAccordionMobile.classList.remove('hidden');
        } else if (selectedCategory === 'Minuman') {
            // Desktop: Show the Minuman accordion
            minumanAccordionDesktop.style.display = 'block';
            // Mobile: Show the Minuman accordion
            minumanAccordionMobile.classList.remove('hidden');
        }
    }

    // Reset all subcategory radio buttons to unchecked for both versions
    function resetSubcategoryRadios() {
        const subcategoryRadios = document.querySelectorAll('input[name="subcategory"]');
        subcategoryRadios.forEach(radio => radio.checked = false);
    }

    // Toggle the visibility of the accordion content (for both desktop and mobile)
    function toggleAccordion(button) {
        const content = button.nextElementSibling;
        content.classList.toggle('hidden');
    }
</script>


<!-- Please Login Modal -->
<input type="checkbox" id="login-modal" class="modal-toggle" hidden>
<div class="modal">
    <div class="modal-box relative max-w-xs sm:max-w-sm md:max-w-md lg:max-w-lg">
        <label for="login-modal" class="btn btn-sm btn-circle absolute right-2 top-2">✕</label>
        <h3 class="text-lg font-bold text-center">Please Login Dulu.</h3>
        <p class="py-4 text-center">Login Dulu Kalau Ingin Beli Makanan!</p>

        <!-- button login -->
        <div class="modal-action flex justify-center w-full">
            <a href="<?= BASE_URL; ?>/User/login"
                class="relative w-full max-w-[140px] h-[50px] rounded-xl overflow-hidden border-none outline-none flex flex-col group">
                <!-- Login? -->
                <div
                    class="absolute inset-0 bg-orange-500 flex items-center justify-center transition-all duration-300 ease-in-out">
                    <p class="text-lg font-bold text-white">Login?</p>
                </div>
                <!-- Login! -->
                <div
                    class="absolute inset-0 bg-yellow-500 flex items-center justify-center transition-all duration-300 ease-in-out transform translate-y-full group-hover:translate-y-0">
                    <p class="text-lg font-bold text-white">Login!</p>
                </div>
            </a>
        </div>
    </div>
</div>

<!-- logic buat menu & filter -->
<script src="https://cdn.jsdelivr.net/npm/fuse.js/dist/fuse.js"></script>
<script>
    const isLoggedIn = <?php echo isset($_SESSION['user']) ? 'true' : 'false'; ?>;
    const allMenus = <?php echo json_encode($data['menus']); ?>;

    // Fuse.js configuration for search
    const fuse = new Fuse(allMenus, {
        keys: ['NAME'],
        threshold: 0.2,
        minMatchCharLength: 1,
        useExtendedSearch: true,
    });

    // Desktop elements
    const filterIndicator = document.getElementById('filter-indicator');
    const filterSelect = document.getElementById('filter-select');
    const searchInput = document.getElementById('search-input');
    const searchButton = document.getElementById('search-btn');
    const categoryRadios1 = document.querySelectorAll('input[name="category"]');
    const categoryRadios2 = document.querySelectorAll('input[name="subcategory"]');


    // Mobile elements
    const searchInputMobile = document.getElementById('search-input-mobile');
    const filterSelectMobile = document.getElementById('filter-select-mobile');
    const searchButtonMobile = document.getElementById('search-btn-mobile');

    // Function to get current filter values
    function getFilterValues() {
        const location = filterSelect.value || filterSelectMobile.value;
        const searchTerm = searchInput.value.trim() || searchInputMobile.value.trim();
        const category = document.querySelector('input[name="category"]:checked')?.value || '';
        const subcategory = document.querySelector('input[name="subcategory"]:checked')?.value || '';

        return {
            location,
            searchTerm,
            category,
            subcategory
        };
    }


    // Function to apply filters
    function applyFilters() {
        const {
            location,
            searchTerm,
            category,
            subcategory
        } = getFilterValues();

        updateFilterIndicator(location);
        filterMenus(location, searchTerm, category, subcategory);
    }



    // Event listeners for desktop view
    filterSelect.addEventListener('change', applyFilters);
    searchInput.addEventListener('input', applyFilters);
    searchButton.addEventListener('click', applyFilters);

    // Event listeners for mobile view
    filterSelectMobile.addEventListener('change', applyFilters);
    searchInputMobile.addEventListener('input', applyFilters);
    searchButtonMobile.addEventListener('click', applyFilters);

    // Event listeners for category radios
    categoryRadios1.forEach(radio => radio.addEventListener('change', applyFilters));
    categoryRadios2.forEach(radio => radio.addEventListener('change', applyFilters));


    // Update filter indicator
    function updateFilterIndicator(selectedFilter) {
        if (selectedFilter) {
            filterIndicator.textContent = `Filter: ${selectedFilter}`;
            filterIndicator.classList.remove('badge-secondary');
            filterIndicator.classList.add('badge-primary');
        } else {
            filterIndicator.textContent = 'New';
            filterIndicator.classList.remove('badge-primary');
            filterIndicator.classList.add('badge-secondary');
        }
    }

    // Filter menus function
    function filterMenus(location = '', searchTerm = '', category = '', subcategory = '') {
        console.log('Filtering menus for location:', location, 'search term:', searchTerm, 'category:', category, 'subcategory:', subcategory);

        let filteredMenus = allMenus;

        // Apply location filter
        if (location) {
            filteredMenus = filteredMenus.filter(menu =>
                (menu.LOCATION_NAME || '').toLowerCase().replace(/\s+/g, '') === location.toLowerCase().replace(/\s+/g, '')
            );
        }

        // Apply category filter (using combined category)
        if (category) {
            filteredMenus = filteredMenus.filter(menu =>
                (menu.MAIN_CATEGORY || '').toLowerCase().includes(category.toLowerCase())
            );
        }

        // Apply subcategory filter (only if category is also selected)
        if (subcategory) {
            filteredMenus = filteredMenus.filter(menu =>
                (menu.SUBCATEGORY_NAME || '').toLowerCase() === subcategory.toLowerCase()
            );
        }

        // Apply Fuse.js search filter (search within already filtered set)
        if (searchTerm) {
            const searchResults = fuse.search(searchTerm);
            filteredMenus = searchResults.map(result => result.item).filter(menu =>
                (!location || (menu.LOCATION_NAME || '').toLowerCase().replace(/\s+/g, '') === location.toLowerCase().replace(/\s+/g, '')) &&
                (!category || (menu.MAIN_CATEGORY || '').toLowerCase().includes(category.toLowerCase())) &&
                (!subcategory || (menu.SUBCATEGORY_NAME || '').toLowerCase() === subcategory.toLowerCase())
            );
        }

        renderMenus(filteredMenus);
    }

    function renderMenus(menus) {
        const menuContainerDesktop = document.getElementById('menu-container');
        menuContainerDesktop.innerHTML = '';

            if (menus.length > 0) {
                menus.forEach(menu => {
                    const menuCard = `
                    <div class="relative card card-compact bg-base-100 w-64 border-2 border-neutral shadow-xl">
                        <figure class="h-40 overflow-hidden">
                            <img class="w-full h-full object-cover border-b-2 border-neutral"
                                src="<?= MENU_URL ?>${menu.MENU_IMAGE_PATH || 'placeholder.jpg'}"
                                alt="${menu.NAME}" />
                        </figure>
                        <div class="card-body">
                            <h2 class="card-title text-secondary">${menu.NAME}</h2>
                            <div class="flex justify-between items-center text-secondary">
                                <div class="text-lg font-bold">
                                    Rp. ${menu.PRICE.toLocaleString('id-ID')}
                                </div>
                                <button class="btn btn-primary text-white ${isLoggedIn ? 'add-to-cart' : ''}"
                                    ${isLoggedIn ? `data-id="${menu.ID_MENU}"` : 'onclick="document.getElementById(\'login-modal\').checked = true"'}>
                                    Add
                                </button>
                            </div>
                        </div>
                    </div>
                `;
                    menuContainerDesktop.innerHTML += menuCard;
                });
            } else {
                menuContainerDesktop.innerHTML = '<p class="text-center text-gray-500 dark:text-gray-400">No items available.</p>';
            }
    }

    // Combine DOMContentLoaded event listener with filters
    document.addEventListener('DOMContentLoaded', () => {
        renderMenus(allMenus);
        applyFilters(); 
    });

    $(document).on('click', '.add-to-cart', function() {
        const menu = $(this).data();

        $.ajax({
            url: '/Cart/add',
            type: 'POST',
            data: {
                id_menu: menu.id,
            },
            dataType: 'json',
            success: function(res) {
                if (res.status === 'success') {
                    updateCartDisplay(res.cart);
                    swalert('success', 'Item added to cart.');
                } else {
                    swalert('error', 'Error updating cart: ' + res.message);
                }
            },
            error: function(xhr, status, error) {
                console.error('AJAX Error: ' + error);
                swalert('error', 'An error occurred while adding the item.');
            }
        });
    });
</script>